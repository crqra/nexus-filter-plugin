/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"

declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    filterable(...args: any): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BooleanFilters: { // input type
    contains?: boolean | null; // Boolean
    endsWith?: boolean | null; // Boolean
    equals?: boolean | null; // Boolean
    gt?: boolean | null; // Boolean
    gte?: boolean | null; // Boolean
    in?: boolean | null; // Boolean
    lt?: boolean | null; // Boolean
    lte?: boolean | null; // Boolean
    not?: boolean | null; // Boolean
    notIn?: boolean | null; // Boolean
    startsWith?: boolean | null; // Boolean
  }
  FloatFilters: { // input type
    contains?: number | null; // Float
    endsWith?: number | null; // Float
    equals?: number | null; // Float
    gt?: number | null; // Float
    gte?: number | null; // Float
    in?: number | null; // Float
    lt?: number | null; // Float
    lte?: number | null; // Float
    not?: number | null; // Float
    notIn?: number | null; // Float
    startsWith?: number | null; // Float
  }
  IDFilters: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string | null; // String
    lt?: string | null; // String
    lte?: string | null; // String
    not?: string | null; // String
    notIn?: string | null; // String
    startsWith?: string | null; // String
  }
  IntFilters: { // input type
    contains?: number | null; // Int
    endsWith?: number | null; // Int
    equals?: number | null; // Int
    gt?: number | null; // Int
    gte?: number | null; // Int
    in?: number | null; // Int
    lt?: number | null; // Int
    lte?: number | null; // Int
    not?: number | null; // Int
    notIn?: number | null; // Int
    startsWith?: number | null; // Int
  }
  PostWhereInput: { // input type
    id?: NexusGenInputs['IDFilters'] | null; // IDFilters
    title?: NexusGenInputs['StringFilters'] | null; // StringFilters
  }
  StringFilters: { // input type
    contains?: string | null; // String
    endsWith?: string | null; // String
    equals?: string | null; // String
    gt?: string | null; // String
    gte?: string | null; // String
    in?: string | null; // String
    lt?: string | null; // String
    lte?: string | null; // String
    not?: string | null; // String
    notIn?: string | null; // String
    startsWith?: string | null; // String
  }
  UserWhereInput: { // input type
    id?: NexusGenInputs['IDFilters'] | null; // IDFilters
    name?: NexusGenInputs['StringFilters'] | null; // StringFilters
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Post: { // root type
    id?: string | null; // ID
    title?: string | null; // String
  }
  Query: {};
  User: { // root type
    id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Post: { // field return type
    id: string | null; // ID
    title: string | null; // String
  }
  Query: { // field return type
    posts: Array<NexusGenRootTypes['Post'] | null>; // [Post]!
    users: Array<NexusGenRootTypes['User'] | null>; // [User]!
  }
  User: { // field return type
    id: string | null; // ID
    name: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Post: { // field return type name
    id: 'ID'
    title: 'String'
  }
  Query: { // field return type name
    posts: 'Post'
    users: 'User'
  }
  User: { // field return type name
    id: 'ID'
    name: 'String'
  }
}

export interface NexusGenArgTypes {
  Query: {
    posts: { // args
      where?: NexusGenInputs['PostWhereInput'] | null; // PostWhereInput
    }
    users: { // args
      where?: NexusGenInputs['UserWhereInput'] | null; // UserWhereInput
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}